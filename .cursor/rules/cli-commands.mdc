---
description:
globs:
alwaysApply: false
---
# CLI 命令规范

## 命令结构
SDK 提供以下 CLI 命令，通过 [src/cli/index.ts](mdc:src/cli/index.ts) 统一管理：

### 主要命令

#### create - 创建插件
- 实现：[src/cli/commands/create.ts](mdc:src/cli/commands/create.ts)
- 功能：交互式创建新插件
- 使用：`automation-sdk create` 或 `npx @choiceform/automation-sdk create`

#### build - 构建插件
- 实现：[src/cli/commands/build.ts](mdc:src/cli/commands/build.ts)
- 功能：编译 TypeScript 并生成分发文件
- 使用：`automation-sdk build`

#### validate - 验证插件
- 实现：[src/cli/commands/validate.ts](mdc:src/cli/commands/validate.ts)
- 功能：验证插件配置和代码结构
- 使用：`automation-sdk validate`

#### publish - 发布插件
- 实现：[src/cli/commands/publish.ts](mcd:src/cli/commands/publish.ts)
- 功能：发布插件到注册表
- 使用：`automation-sdk publish`

## 命令开发规范

### Commander.js 使用
- 所有命令使用 Commander.js 框架
- 统一的命令结构和选项定义
- 提供清晰的帮助信息

### 交互式界面
- 使用 inquirer.js 实现用户交互
- 提供清晰的选项和验证
- 支持多步骤配置流程

### 进度指示
- 使用 ora 显示加载状态
- 提供有意义的进度信息
- 区分成功、警告和错误状态

### 错误处理
- 捕获和处理所有可能的错误
- 提供有用的错误信息和解决建议
- 使用适当的退出码

## 模板系统

### 技术模板
- Trigger：监听事件的触发器
- Action：执行操作的动作节点
- Transform：数据转换节点
- AI：AI 驱动的处理节点
- Control：流程控制节点

### 业务域模板
- 支持 9 个业务域分类
- 每个域有特定的配置和示例
- 预定义的端口配置和工具栏设置

## 文件生成规范

### 生成的文件结构
```
plugin-name/
├── src/
│   └── index.ts          # 主实现文件
├── tests/                # 测试文件（可选）
├── package.json          # 包配置
├── plugin.manifest.json  # 插件清单
├── plugin.registry.json  # 注册表信息
├── tsconfig.json         # TypeScript 配置
├── icon.svg              # 插件图标
├── README.md             # 文档
└── .gitignore            # Git 忽略文件
```

### 配置文件生成
- 使用项目标准的配置模板
- 根据插件类型自动调整配置
- 保持与 automation 平台的兼容性

## 工具集成

### 包管理器
- 默认使用 pnpm 作为包管理器
- 生成的 package.json 包含 pnpm 脚本
- 支持 yarn 和 npm 的备选方案

### 开发工具
- TypeScript 编译器集成
- Jest 测试框架支持
- ESLint 和 Prettier 配置

### 构建流程
- 自动化的构建和发布流程
- 版本管理和依赖检查
- 插件验证和质量检查
